pipeline {
    agent any

    /****************************************
     * 🌟 CONFIGURATION SECTION
     ****************************************/
    environment {
        // GitHub & Docker credentials
        GITHUB_TOKEN = credentials('github-token')
        DOCKER_CREDS = credentials('docker-hub-creds')

        // ---- 🔧 General Config ----
        GIT_REPO_URL = "https://github.com/lvoxx/SRMS-backend.git"
        GIT_BRANCH = "main"
        DOCKER_USER_ORG = "lvoxx"  // Docker Hub username/organization
        DOCKER_PREFIX = "srms"      // Prefix for image names

        // ---- 🧩 Build Targets ----
        MODULES = "contactor,customer,dashboard,kitchen,notification,order,payment,reporting,warehouse"

        // ---- 🏷️ Commit Tag ----
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                echo "🔹 Cloning repository..."
                git(
                    url: "${GIT_REPO_URL}",
                    branch: "${GIT_BRANCH}",
                    credentialsId: 'github-token'
                )
                script {
                    echo "📌 Current commit: ${COMMIT_HASH}"
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('SpringServices') {
                    echo "🔹 Running Maven tests from SpringServices root pom.xml"
                    sh 'mvn clean test -B'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Install JAR Files') {
            steps {
                dir('SpringServices') {
                    echo "🔹 Running JAR installation from SpringServices root pom.xml"
                    sh 'mvn clean install -DskipTests -B'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    dir("SpringServices") {
                        def modules = MODULES.split(',')
                        def buildErrors = []

                        for (module in modules) {
                            def moduleName = module.trim()
                            def imageName = "${DOCKER_USER_ORG}/${DOCKER_PREFIX}-${moduleName}"
                            def taggedNameLatest = "${imageName}:latest"
                            def taggedNameCommit = "${imageName}:${COMMIT_HASH}"

                            echo "🚧 Building Docker image: ${imageName}"

                            try {
                                dir("${moduleName}") {
                                    echo "🐳 Building in directory: ${pwd()}"
                                    sh "docker build -t ${taggedNameLatest} -t ${taggedNameCommit} ."
                                    echo "✅ Successfully built ${imageName}"
                                }
                            } catch (Exception e) {
                                buildErrors.add("❌ Failed to build ${moduleName}: ${e.message}")
                                echo "⚠️ Error building ${moduleName}, continuing with other modules..."
                            }
                        }

                        if (buildErrors.size() > 0) {
                            error("Build failed for some modules:\n${buildErrors.join('\n')}")
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def modules = MODULES.split(',')
                    def pushErrors = []

                    // Login to Docker Hub using withCredentials for security
                    echo "🔹 Logging into Docker Hub..."
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo "$DOCKER_CREDS_PSW" | docker login -u "$DOCKER_CREDS_USR" --password-stdin
                        """
                        
                        for (module in modules) {
                            def moduleName = module.trim().toLowerCase()
                            def imageName = "${DOCKER_USER_ORG}/${DOCKER_PREFIX}-${moduleName}"
                            
                            echo "📦 Pushing ${imageName}:latest and ${imageName}:${COMMIT_HASH}"
                            
                            try {
                                sh """
                                    docker push ${imageName}:latest
                                    docker push ${imageName}:${COMMIT_HASH}
                                """
                                echo "✅ Successfully pushed ${imageName}"
                            } catch (Exception e) {
                                pushErrors.add("❌ Failed to push ${moduleName}: ${e.message}")
                                echo "⚠️ Error pushing ${moduleName}, continuing with other modules..."
                            }
                        }
                    }

                    if (pushErrors.size() > 0) {
                        error("Push failed for some modules:\n${pushErrors.join('\n')}")
                    }
                }
            }
        }

        stage('Clean Docker Images') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "🧹 Cleaning local Docker images to free up space..."
                    def modules = MODULES.split(',')
                    
                    for (module in modules) {
                        def moduleName = module.trim().toLowerCase()
                        def imageName = "${DOCKER_USER_ORG}/${DOCKER_PREFIX}-${moduleName}"
                        
                        try {
                            sh """
                                docker rmi ${imageName}:latest || true
                                docker rmi ${imageName}:${COMMIT_HASH} || true
                            """
                            echo "🗑️ Removed local images for ${imageName}"
                        } catch (Exception e) {
                            echo "⚠️ Could not remove images for ${moduleName}: ${e.message}"
                        }
                    }
                    
                    // Clean dangling images
                    sh 'docker image prune -f || true'
                    echo "✅ Docker cleanup completed"
                }
            }
        }

        stage('Clean Workspace') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "🧹 Cleaning workspace..."
                    
                    // Clean Maven artifacts
                    dir('SpringServices') {
                        sh 'mvn clean || true'
                    }
                    
                    // Clean workspace
                    cleanWs(
                        deleteDirs: true,
                        disableDeferredWipeout: true,
                        notFailBuild: true,
                        patterns: [
                            [pattern: '**/target/**', type: 'INCLUDE'],
                            [pattern: '**/.git/**', type: 'EXCLUDE']
                        ]
                    )
                    
                    echo "✅ Workspace cleaned successfully"
                }
            }
        }
    }

    post {
        success {
            echo """
            ═══════════════════════════════════════
            ✅ BUILD & PUSH COMPLETED SUCCESSFULLY!
            ═══════════════════════════════════════
            📦 Modules built: ${MODULES}
            🏷️  Commit hash: ${COMMIT_HASH}
            🐳 Images pushed to: ${DOCKER_USER_ORG}/${DOCKER_PREFIX}-*
            ═══════════════════════════════════════
            """
        }
        failure {
            echo """
            ═══════════════════════════════════════
            ❌ PIPELINE FAILED
            ═══════════════════════════════════════
            Check logs above for details.
            Build: ${env.BUILD_NUMBER}
            Commit: ${COMMIT_HASH}
            ═══════════════════════════════════════
            """
        }
        always {
            script {
                echo "🔚 Performing final cleanup..."
                sh 'docker logout || true'
                
                // Additional cleanup if needed
                sh """
                    # Remove any stopped containers
                    docker container prune -f || true
                    
                    # Show disk usage
                    echo "💾 Current Docker disk usage:"
                    docker system df || true
                """
            }
        }
    }
}