pipeline {
    agent any

    /****************************************
     * üåü CONFIGURATION SECTION
     ****************************************/
    environment {
        // GitHub & Docker credentials
        GITHUB_TOKEN = credentials('github-token')
        DOCKER_CREDS = credentials('docker-hub-creds')

        // Docker Hub credentials
        DOCKER_USER = '$DOCKER_CREDS_USR'
        DOCKER_PASS = '$DOCKER_CREDS_PSW'

        // ---- üîß General Config ----
        GIT_REPO_URL = "https://github.com/lvoxx/SRMS-backend.git"
        GIT_BRANCH = "main"
        DOCKER_ORG = "srms"        // Docker Hub organization prefix

        // ---- üß© Build Targets ----
        MODULES = "contact,customer,dashboard,kitchen,notification,order,payment,reporting,warehouse"

        // ---- üè∑Ô∏è Commit Tag ----
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîπ Cloning repository..."
                git(
                    url: 'https://github.com/lvoxx/SRMS-backend.git',
                    branch: 'main',
                    credentialsId: 'github-token'
                )
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('SpringServices') {
                    echo "üîπ Running Maven tests from SpringServices root pom.xml"
                    sh 'mvn clean test -B'
                }
            }
        }

        stage('Install File Jar') {
            steps {
                dir('SpringServices') {
                    echo "üîπ Running Jar installation from SpringServices root pom.xml"
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    dir("SpringServices") {
                        def modules = MODULES.split(',')
                        for (module in modules) {
                            def imageName = "${DOCKER_ORG}/${module}"
                            def taggedNameLatest = "${imageName}:latest"
                            def taggedNameCommit = "${imageName}:${COMMIT_HASH}"

                            echo "üöß Building Docker image for module: ${module}"

                            dir("${module}") {
                                // DEBUG: print current workspace
                                echo "üìÇ Current working directory for ${module}:"
                                sh 'pwd && ls -alh'

                                // DEBUG: check if target/*.jar do exists
                                echo "üîç Checking JAR files in target/..."
                                sh """
                                    if [ -d target ]; then
                                        echo "Contents of target/:"
                                        ls -alh target
                                        echo "Found JAR files:"
                                        find target -maxdepth 1 -type f -name "*.jar" || echo "‚ö†Ô∏è  No JAR found in target/"
                                    else
                                        echo "‚ö†Ô∏è  target/ directory not found!"
                                    fi
                                """

                                // === DEBUG & VALIDATION BLOCK ===
                                sh '''
                                    echo "=== DOCKERFILE VALIDATION ==="
                                    pwd
                                    echo "Listing all files (case-sensitive):"
                                    ls -alh

                                    # T√¨m t·∫•t c·∫£ c√°c file c√≥ t√™n g·∫ßn gi·ªëng Dockerfile
                                    echo "Searching for Dockerfile (any case):"
                                    find . -maxdepth 2 -type f -iname "dockerfile*" | head -5 || echo "No file matching 'dockerfile*' found"

                                    # Ki·ªÉm tra ch√≠nh x√°c file t√™n Dockerfile (D hoa)
                                    if [ ! -f "Dockerfile" ]; then
                                        echo "ERROR: 'Dockerfile' NOT FOUND in $(pwd)!"
                                        echo "   Expected location: $(pwd)/Dockerfile"
                                        echo "   This will cause 'docker build' to fail."
                                        exit 1
                                    fi

                                    echo "Dockerfile FOUND at: $(pwd)/Dockerfile"

                                    # Ki·ªÉm tra quy·ªÅn ƒë·ªçc
                                    if [ ! -r "Dockerfile" ]; then
                                        echo "ERROR: 'Dockerfile' exists but is NOT READABLE!"
                                        ls -l Dockerfile
                                        exit 1
                                    fi

                                    echo "Dockerfile is READABLE"

                                    # In 10 d√≤ng ƒë·∫ßu c·ªßa Dockerfile ƒë·ªÉ ki·ªÉm tra n·ªôi dung
                                    echo "First 10 lines of Dockerfile:"
                                    head -10 Dockerfile

                                    echo "=== DOCKERFILE VALIDATION PASSED ==="
                                '''
                                // === END DEBUG BLOCK ===

                                // Docker image build
                                echo "üê≥ Starting Docker build in directory: ${pwd}"
                                sh "docker build -t ${taggedNameLatest} -t ${taggedNameCommit} ."
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def modules = MODULES.split(',')

                    // Login Docker Hub
                    sh """
                        echo "üîπ Logging into Docker Hub..."
                        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                    """

                    for (module in modules) {
                        def imageName = "${DOCKER_ORG}/${module.trim().toLowerCase()}"
                        echo "üì¶ Pushing ${imageName}:latest and ${imageName}:${COMMIT_HASH}"
                        sh """
                            docker push ${imageName}:latest
                            docker push ${imageName}:${COMMIT_HASH}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build & Push completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
        always {
            sh 'docker logout || true'
        }
    }
}
