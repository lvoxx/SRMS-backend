<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/>
		<!-- lookup parent from repository -->
	</parent>

	<groupId>io.github.lvoxx.srms</groupId>
	<artifactId>root</artifactId>
	<version>1.0.0</version>
	<name>Root</name>
	<description>Smart Restaurant Management System - A Restaurant Mircroservice Application</description>

	<url/>
	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://github.com/lvoxx/SRMS-backend/blob/main/LICENSE</url>
		</license>
	</licenses>
	<developers>
		<developer>
			<name>Lvoxx</name>
			<roles>
				<role>Maintainer</role>
			</roles>
			<email>lvoxxartist@gmail.com</email>
			<url>https://github.com/lvoxx</url>
		</developer>
	</developers>

	<packaging>pom</packaging>

	<modules>
		<module>config_server</module>
		<module>contactor</module>
		<module>customer</module>
		<module>dashboard</module>
		<module>gateway</module>
		<module>kitchen</module>
		<module>notification</module>
		<module>order</module>
		<module>payment</module>
		<module>reporting</module>
		<module>warehouse</module>
	</modules>

	<properties>
		<!-- VERSIONING START -->
		<java.version>21</java.version>
		<spring-boot.version>3.5.3</spring-boot.version>
		<spring-cloud.version>4.3.0</spring-cloud.version>
		<spring-cloud.kubernetes.version>3.3.0</spring-cloud.kubernetes.version>
		<spring-cloud.resilience4j.version>3.3.0</spring-cloud.resilience4j.version>
		<spring-cloud.sleuth.version>3.1.11</spring-cloud.sleuth.version>

		<postgresql.version>42.7.7</postgresql.version>
		<r2dbc-postgresql.version>1.0.7.RELEASE</r2dbc-postgresql.version>
		<spring-keycloak.version>25.0.3</spring-keycloak.version>
		<keycloak.version>26.0.6</keycloak.version>
		<lombok.version>1.18.38</lombok.version>

		<reactor-test.version>3.7.8</reactor-test.version>
		<testcontainers.version>1.21.3</testcontainers.version>
		<mockserver-client-java.version>5.15.0</mockserver-client-java.version>
		<testcontainers-keycloak.version>3.4.0</testcontainers-keycloak.version>
		<spring-security-test.version>6.5.2</spring-security-test.version>
		<spring-boot.testcontainers.version>3.5.3</spring-boot.testcontainers.version>
		<!-- VERSIONING END -->

		<!-- DOCKER START -->
		<docker.image.prefix>lvoxx/srms</docker.image.prefix>
		<skip.docker.build>true</skip.docker.build>
		<!-- Định nghĩa tất cả ports ở đây -->
		<port.gateway>8080</port.gateway>
		<port.contactor>8081</port.contactor>
		<port.customer>8082</port.customer>
		<port.order>8083</port.order>
		<port.payment>8084</port.payment>
		<port.kitchen>8085</port.kitchen>
		<port.warehouse>8086</port.warehouse>
		<port.notification>8087</port.notification>
		<port.dashboard>8088</port.dashboard>
		<port.reporting>8089</port.reporting>

		<!-- Property mặc định (cho service không tự định nghĩa) -->
		<service.port>8080</service.port>
		<!-- DOCKER END -->
	</properties>

	<repositories>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven/</url>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<!-- SPRING BOOT -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-actuator</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-oauth2-client</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-r2dbc</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-redis-reactive</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-webflux</artifactId>
				<version>${spring-boot.version}</version>
			</dependency>
			<!-- SPRING BOOT -->

			<!-- SPRING CLOUD -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-gateway-server-webflux</artifactId>
				<version>${spring-cloud.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
				<version>${spring-cloud.resilience4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-kubernetes-client-all</artifactId>
				<version>${spring-cloud.kubernetes.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-sleuth</artifactId>
				<version>${spring-cloud.sleuth.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-sleuth-zipkin</artifactId>
				<version>${spring-cloud.sleuth.version}</version>
			</dependency>
			<!-- SPRING CLOUD -->

			<!-- 3RD -->
			<dependency>
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>${postgresql.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.postgresql</groupId>
				<artifactId>r2dbc-postgresql</artifactId>
				<version>${r2dbc-postgresql.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-spring-boot-starter</artifactId>
				<version>${spring-keycloak.version}</version>
			</dependency>

			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<optional>true</optional>
			</dependency>

			<!-- 3RD -->

			<!-- TEST -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${spring-boot.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-testcontainers</artifactId>
				<version>${spring-boot.testcontainers.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.projectreactor</groupId>
				<artifactId>reactor-test</artifactId>
				<version>${reactor-test.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-test</artifactId>
				<version>${spring-security-test.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.dasniko</groupId>
				<artifactId>testcontainers-keycloak</artifactId>
				<version>${testcontainers-keycloak.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-admin-client</artifactId>
				<version>${keycloak.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.mock-server</groupId>
				<artifactId>mockserver-client-java</artifactId>
				<version>${mockserver-client-java.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>mockserver</artifactId>
				<version>${testcontainers.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>junit-jupiter</artifactId>
				<version>${testcontainers.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- TEST -->
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>docker-build</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>1.4.13</version>
						<configuration>
							<skip>${skip.docker.build}</skip>
							<repository>${docker.image.prefix}/${project.artifactId}</repository>
							<tag>${project.version}</tag>
							<dockerfile>${project.basedir}/../Dockerfile</dockerfile>
							<buildArgs>
								<SERVICE_NAME>${project.artifactId}</SERVICE_NAME>
								<ARTIFACT_NAME>${project.build.finalName}</ARTIFACT_NAME>
								<EXPOSED_PORT>${service.port}</EXPOSED_PORT>
							</buildArgs>
							<contextDirectory>${project.basedir}/..</contextDirectory>
						</configuration>
						<executions>
							<execution>
								<id>build-docker-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>
</project>
